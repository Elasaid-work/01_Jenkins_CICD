version: '3.8'

services:
  jenkins:
    image: jenkins/jenkins:2.426.1-lts
    container_name: jenkins-cicd-demo
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - ./jenkins:/var/jenkins_home/jobs/demo-pipeline
      - ./scripts:/scripts
    environment:
      - JENKINS_OPTS=--httpPort=8080
      #- JAVA_OPTS=-Djenkins.install.runSetupWizard=false -Xmx2g
    networks:
      - jenkins-network
    user: root  # Nécessaire pour accéder à Docker socket
    
  # Application de démonstration
  demo-app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: demo-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
    volumes:
      - ./src:/app/src
      - /app/node_modules
    networks:
      - jenkins-network
    depends_on:
      - redis
      - postgres
    
  # Base de données pour les tests
  postgres:
    image: postgres:15-alpine
    container_name: demo-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=demo_app
      - POSTGRES_USER=demo_user
      - POSTGRES_PASSWORD=demo_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - jenkins-network
      
  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: demo-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - jenkins-network
    command: redis-server --appendonly yes
    
  # Registry Docker local (pour les tests)
  registry:
    image: registry:2
    container_name: local-registry
    restart: unless-stopped
    ports:
      - "5000:5000"
    volumes:
      - registry_data:/var/lib/registry
    networks:
      - jenkins-network
    environment:
      - REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/var/lib/registry
      
  # Outils de sécurité
  trivy:
    image: aquasec/trivy:0.45.0
    container_name: trivy-scanner
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - trivy_cache:/root/.cache/trivy
    networks:
      - jenkins-network
    command: --help
    profiles:
      - security
      
  # SonarQube pour l'analyse de code
  sonarqube:
    image: sonarqube:10.2-community
    container_name: sonarqube
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://postgres:5432/sonarqube
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar_password
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    networks:
      - jenkins-network
    depends_on:
      - postgres
    profiles:
      - analysis
      
  # Nginx pour le reverse proxy (optionnel)
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - jenkins-network
    depends_on:
      - jenkins
      - demo-app
    profiles:
      - proxy

volumes:
  jenkins_home:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  registry_data:
    driver: local
  trivy_cache:
    driver: local
  sonarqube_data:
    driver: local
  sonarqube_logs:
    driver: local
  sonarqube_extensions:
    driver: local

networks:
  jenkins-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
